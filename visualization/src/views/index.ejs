<!DOCTYPE html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<div class="container">
    <div class="jumbotron">
      <h1>Movie Analytics</h1>      
    </div>
    <h2>Profit Analysis by Genre(1980 - 2015)</h2>
</div>
<style>

svg {
  font: 10px sans-serif;
}

.y.axis path {
  display: none;
}

.y.axis line {
  stroke: #fff;
  stroke-opacity: .2;
  shape-rendering: crispEdges;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}
.y.axis .zero line {
  stroke: #000;
  stroke-opacity: 1;
}

.title {
  font: 300 78px Helvetica Neue;
  fill: #666;
}

/*.birthyear,
.age {
  text-anchor: middle;
}*/


rect {
  fill-opacity: .6;
  fill: #e377c2;
}

rect:first-child {
  fill: #1f77b4;
}

</style>
<body>
<svg width="960" height="500"></svg>
<script src="d3.v4.min.js"></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="http://d3js.org/d3.v4.min.js" charset="utf-8"></script>
<script>

var svg = d3.select("svg"),
    margin = {top: 20, right: 80, bottom: 30, left:100},
    width = svg.attr("width") - margin.left - margin.right,
    height = svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//var parseTime = d3.timeParse("%Y%m%d");

var x = d3.scaleLinear().range([0, width]),
    y = d3.scaleLinear().range([height, 0]),
    z = d3.scaleOrdinal(d3.schemeCategory10);

var line = d3.line()
    .curve(d3.curveBasis)
    .x(function(d) { return x(d.year); })
    .y(function(d) { return y(d.profit); });
var color = d3.scale.category10();

var url = 'http://localhost:5000/moviesDetails'
d3.json(url, function(error, data) {
  if (error) throw error;

  color.domain(d3.keys(data[0]).filter(function(key) {
      return key !== "year" && key !== "_id";
  }));
  // Convert strings to numbers.
  data.forEach(function(d) {
   
    d.year = +d.year;
    d.comedy = +d.comedy;
    d.action = +d.action;
    d.crime = +d.crime;
    
  });
  
  var results = color.domain().map(function(id) {
    return {
      id: id,
      values: data.map(function(d) {
        console.log(d.year+" "+d[id]);
        return {year: d.year, profit: d[id]};  
    })
    };
  });


  console.log("I am here");
  x.domain(d3.extent(data, function(d) { return d.year; }));
  y.domain([
    d3.min(results, function(c) { return d3.min(c.values, function(d) { return d.profit; }); }),
    d3.max(results, function(c) { return d3.max(c.values, function(d) { return d.profit; }); })
  ]);
  console.log(d3.max(results, function(c) { return d3.max(c.values, function(d) { return d.profit; }); }))
  
  z.domain(results.map(function(c) { return c.id; }));
  g.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

  g.append("g")
      .attr("class", "axis axis--y")
      .call(d3.axisLeft(y))
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", "0.71em")
      .attr("fill", "#000")
      .text("Profit");

  var city = g.selectAll(".city")
    .data(results)
    .enter().append("g")
      .attr("class", "city");

  city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return z(d.id); });

  city.append("text")
      .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.year) + "," + y(d.value.profit) + ")"; })
      .attr("x", 3)
      .attr("dy", "0.35em")
      .style("font", "10px sans-serif")
      .text(function(d) { return d.id; });
  console.log("Final");
  });

function type(d, _, columns) {
  d.year = d.year;
  for (var i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];
  return d;
}
</script>